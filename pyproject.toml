[tool.poetry]
name = "ustad-protocol-mcp"
version = "1.0.0"
description = "Minimal MCP server with sequential thinking and search capabilities"
authors = ["Ustad Protocol Team"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
fastmcp = "^2.0.0"
mcp = "^1.0.0"
fastapi = "^0.104.0"
httpx = "^0.25.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
starlette = "^0.32.0"
pydantic = "^2.5.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3"
pytest-asyncio = "^0.24"
pytest-cov = "^5.0"
pytest-xdist = "^3.6"
pytest-timeout = "^2.3"
mypy = "^1.11"
ruff = "^0.7"
black = "^24.8"
isort = "^5.13"
pre-commit = "^3.8"
bandit = "^1.7"
pydocstyle = "^6.3"
types-requests = "^2.32"
pip-audit = "^2.7"
safety = "^3.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Ruff configuration - Fast Python linter
[tool.ruff]
target-version = "py311"
line-length = 100
fix = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    # "D",    # pydocstyle - disabled temporarily due to too many existing violations
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "RUF",  # Ruff-specific rules
    "PTH",  # flake8-use-pathlib
    "PERF", # performance
    "FURB", # refurb
    "LOG",  # flake8-logging
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "TRY",  # tryceratops
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",    # flake8-builtins
    "C90",  # mccabe complexity
    "DTZ",  # flake8-datetimez
    "EM",   # flake8-errmsg
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "RSE",  # flake8-raise
    "S",    # bandit
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
]

ignore = [
    # Documentation - fix gradually
    "D",      # All docstring rules - too many violations to fix now

    # Annotations - fix gradually
    "ANN",    # All annotation rules - too many violations to fix now

    # Essential for functionality
    "S101",   # Use of assert detected (needed for tests)
    "T201",   # Print found (needed for CLI)

    # Style choices
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default value in function definition
    "E501",   # Line too long - many existing violations

    # Complexity - refactor later
    "C901",   # Too complex
    "PLR",    # All pylint refactor rules

    # Minor improvements - fix later
    "BLE001", # Blind except
    "DTZ",    # Datetime timezone issues
    "RUF013", # Implicit optional
    "B007",   # Unused loop variable
    "PERF",   # Performance suggestions
    "UP038",  # Use union types
    "SIM",    # Simplification suggestions
    "C4",     # Comprehension suggestions
    "ANN201", # Missing return annotations

    # Exception message formatting - style choice
    "TRY003", # Long messages in exceptions
    "EM101",  # String literals in exceptions
    "EM102",  # f-strings in exceptions

    # Less critical security/style issues
    "S112",   # Try-except-continue is sometimes needed
    "RET504", # Unnecessary assignment before return (style)
    "ARG001", # Unused function arguments (sometimes needed for interfaces)
    "ARG002", # Unused method arguments
    "F841",   # Local variable assigned but never used (sometimes for clarity)
    "PLW0603", # Global statement (already fixed most critical ones)
    "PLW0602", # Global without assignment
    "PTH",    # Use pathlib (gradual migration)
    "S603",   # Subprocess calls (already marked safe ones)
    "S607",   # Partial path for subprocess
    "S104",   # Binding to all interfaces (needed for containers)
    "RUF012", # Mutable class attributes (chess tables)
    "INP001", # Implicit namespace package
    "E402",   # Module import not at top (needed for path setup)
    "E712",   # Comparison to True/False (tests need explicit checks)
    "TRY300", # Consider else block (style choice)
    "TRY301", # Abstract raise to inner function (over-engineering)
    "PLW1641", # Object comparison without __eq__
    "TCH001", # Type checking imports
    "TCH002", # Type checking imports
    "TCH003", # Type checking imports
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "D", "ANN", "ARG", "PLC", "PLR"]
"src/cli_inspector.py" = ["T201", "T203"]  # Allow print in CLI
"scripts/run_tests.py" = ["S603"]  # Subprocess calls with controlled input for testing

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 7
max-branches = 12
max-returns = 6
max-statements = 50

# Black configuration - Code formatter
[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'

# isort configuration - Import sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# mypy configuration - Type checking
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
# Allow untyped decorators for framework decorators like @mcp.tool()
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
asyncio_mode = "auto"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]

# Bandit configuration - Security linting
[tool.bandit]
targets = ["src"]
skips = ["B101"]  # Skip assert_used test
exclude_dirs = ["tests", "venv"]

# pydocstyle configuration
[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104", "D107"]
match-dir = "(?!tests).*"
