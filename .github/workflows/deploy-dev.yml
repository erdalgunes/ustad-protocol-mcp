name: Deploy to Development

on:
  push:
    branches: [ dev, develop, ustad-protocol-dev ]
  workflow_dispatch: # Allow manual triggering

env:
  PROJECT_ID: ustad-470310
  SERVICE_NAME: ustad-mcp-dev
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install

    - name: Run linting
      run: |
        poetry run ruff check .
        poetry run ruff format --check .

    - name: Run type checking
      run: poetry run mypy . || true  # Continue on mypy errors for now

    - name: Run security checks
      run: poetry run bandit -r src/

    - name: Run tests
      run: poetry run pytest tests/ -v --cov=src --cov-report=term-missing

  deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud
      run: gcloud auth configure-docker

    - name: Build and push Docker image
      run: |
        gcloud builds submit --tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        gcloud builds submit --tag gcr.io/$PROJECT_ID/$SERVICE_NAME:latest .

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8000 \
          --max-instances 10 \
          --concurrency 1 \
          --cpu 1 \
          --memory 512Mi \
          --set-env-vars="PORT=8000,DOCKER_CONTAINER=true" \
          --quiet

    - name: Verify deployment
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        echo "Service deployed at: $SERVICE_URL"
        
        # Wait for service to be ready
        sleep 30
        
        # Test health endpoint
        curl -f $SERVICE_URL/health || exit 1
        curl -f $SERVICE_URL/capabilities || exit 1
        
        echo "âœ… Development deployment successful!"
        echo "ðŸ”— Health: $SERVICE_URL/health"
        echo "ðŸ”— Capabilities: $SERVICE_URL/capabilities"
        echo "ðŸ”— SSE Endpoint: $SERVICE_URL/sse"