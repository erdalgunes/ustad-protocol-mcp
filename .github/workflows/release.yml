name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Validate semantic version
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?(\+[a-zA-Z0-9.]+)?$ ]]; then
            echo "Error: Invalid semantic version: $VERSION"
            exit 1
          fi
      
      - name: Check version in pyproject.toml
        run: |
          PYPROJECT_VERSION=$(grep -E "^version = " pyproject.toml | cut -d'"' -f2)
          if [[ "$PYPROJECT_VERSION" != "${{ steps.get_version.outputs.version }}" ]]; then
            echo "Error: Version mismatch!"
            echo "Tag/Input: ${{ steps.get_version.outputs.version }}"
            echo "pyproject.toml: $PYPROJECT_VERSION"
            exit 1
          fi

  run-tests:
    name: Run Full Test Suite
    needs: validate-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.8.2'
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Run all checks
        run: |
          poetry run ruff check src/ tests/
          poetry run mypy src/ --strict
          poetry run bandit -r src/
          poetry run pytest tests/ --cov=src --cov-fail-under=80

  build-and-publish:
    name: Build & Publish
    needs: [validate-version, run-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.8.2'
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Build package
        run: poetry build
      
      - name: Check build artifacts
        run: |
          ls -la dist/
          tar -tzf dist/*.tar.gz | head -20
      
      - name: Publish to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $POETRY_PYPI_TOKEN_PYPI
          poetry publish
        continue-on-error: true

  create-release:
    name: Create GitHub Release
    needs: [validate-version, build-and-publish]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          echo "## What's Changed" > CHANGELOG.md
          git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...v${{ needs.validate-version.outputs.version }}" >> CHANGELOG.md
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-version.outputs.version }}
          name: Release v${{ needs.validate-version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(needs.validate-version.outputs.version, '-') }}
          generate_release_notes: true

  update-version:
    name: Update Version for Next Release
    needs: create-release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.8.2'
      
      - name: Bump to next dev version
        id: bump
        run: |
          CURRENT_VERSION="${{ needs.validate-version.outputs.version }}"
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          PATCH=$((VERSION_PARTS[2] + 1))
          NEXT_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH-dev"
          poetry version $NEXT_VERSION
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: bump version to ${{ steps.bump.outputs.next_version }}'
          title: 'chore: bump version to ${{ steps.bump.outputs.next_version }}'
          body: |
            Automated version bump after release v${{ needs.validate-version.outputs.version }}
            
            - Updates version in pyproject.toml to ${{ steps.bump.outputs.next_version }}
            - Prepares for next development cycle
          branch: auto-version-bump-${{ steps.bump.outputs.next_version }}
          delete-branch: true